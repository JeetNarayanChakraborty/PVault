package com.example.PVault.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URL;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.stereotype.Service;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.IOException;


@Service
public class AIService 
{
	public boolean isPasswordPwned(String password) throws Exception 
	{
	    String sha1 = DigestUtils.sha1Hex(password).toUpperCase();
	    String prefix = sha1.substring(0, 5);
	    String suffix = sha1.substring(5);

	    URI uri = URI.create("https://api.pwnedpasswords.com/range/" + prefix);
	    URL url = uri.toURL();
	    BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
	    return reader.lines().anyMatch(line -> line.startsWith(suffix));
	}

	public String analyzePasswordWithAI(String password) throws IOException 
	{
	    OkHttpClient client = new OkHttpClient();
	    ObjectMapper objectMapper = new ObjectMapper();

	    String apiKey = "tgp_v1_YaGw6xsozJ6OHXVvue79pH3txEjMQMdLBgNe6NGtQO8";
	    String endpoint = "https://api.together.xyz/v1/chat/completions";

	    // Create the messages array for chat completions
	    ArrayNode messagesArray = objectMapper.createArrayNode();
	    ObjectNode systemMessage = objectMapper.createObjectNode();
	    systemMessage.put("role", "system");
	    systemMessage.put("content", "You are a security expert AI that reviews passwords.");
	    
	    ObjectNode userMessage = objectMapper.createObjectNode();
	    userMessage.put("role", "user");
	    userMessage.put("content", "Analyze this password for security risks in 3 lines compact: " + password);
	    
	    messagesArray.add(systemMessage);
	    messagesArray.add(userMessage);

	    // Build the request body
	    ObjectNode requestJson = objectMapper.createObjectNode();
	    requestJson.put("model", "mistralai/Mistral-7B-Instruct-v0.2");
	    requestJson.set("messages", messagesArray);
	    requestJson.put("max_tokens", 150);
	    requestJson.put("temperature", 0.5);

	    RequestBody body = RequestBody.create(
	        requestJson.toString(),
	        MediaType.parse("application/json")
	    );

	    Request request = new Request.Builder()
	        .url(endpoint)
	        .addHeader("Authorization", "Bearer " + apiKey)
	        .addHeader("Content-Type", "application/json")
	        .post(body)
	        .build();

	    try(Response response = client.newCall(request).execute()) 
	    {
	        if(!response.isSuccessful()) 
	        {
	            throw new IOException("Unexpected code: " + response);
	        }

	        String jsonResponse = response.body().string();
	        JsonNode root = objectMapper.readTree(jsonResponse);
	        JsonNode choicesNode = root.get("choices");

	        if(choicesNode != null && choicesNode.isArray() && choicesNode.size() > 0) 
	        {
	            JsonNode messageNode = choicesNode.get(0).get("message");
	            
	            if(messageNode != null && !messageNode.isNull()) 
	            {
	                JsonNode contentNode = messageNode.get("content");
	                
	                if(contentNode != null && !contentNode.isNull()) 
	                {
	                    return contentNode.asText().trim();
	                }
	            }
	        }

	        return "No analysis could be generated by the AI.";
	    }
	}
}





